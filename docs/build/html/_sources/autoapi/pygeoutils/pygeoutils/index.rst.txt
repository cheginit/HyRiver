:mod:`pygeoutils.pygeoutils`
============================

.. py:module:: pygeoutils.pygeoutils

.. autoapi-nested-parse::

   Some utilities for manipulating GeoSpatial data.



Module Contents
---------------

.. data:: DEF_CRS
   :annotation: = epsg:4326

   

.. function:: json2geodf(content: Union[List[Dict[str, Any]], Dict[str, Any]], in_crs: str = DEF_CRS, crs: str = DEF_CRS) -> gpd.GeoDataFrame

   Create GeoDataFrame from (Geo)JSON.

   :param content: A (Geo)JSON dictionary e.g., r.json() or a list of them.
   :type content: dict or list of dict
   :param in_crs: CRS of the content, defaults to ``epsg:4326``.
   :type in_crs: str
   :param crs: The target CRS of the output GeoDataFrame, defaults to ``epsg:4326``.
   :type crs: str, optional

   :returns: Generated geo-data frame from a GeoJSON
   :rtype: geopandas.GeoDataFrame


.. function:: arcgis2geojson(arcgis: Dict[str, Any], id_attr: Optional[str] = None) -> Dict[str, Any]

   Convert ESRIGeoJSON format to GeoJSON.

   .. rubric:: Notes

   Based on https://github.com/chris48s/arcgis2geojson

   :param arcgis: The ESRIGeoJSON format str (or binary)
   :type arcgis: str or binary
   :param id_attr: ID of the attribute of interest
   :type id_attr: str

   :returns: A GeoJSON file readable by GeoPandas
   :rtype: dict


.. function:: gtiff2xarray(r_dict: Dict[str, bytes], geometry: Union[Polygon, MultiPolygon, Tuple[float, float, float, float]], geo_crs: str, ds_dims: Tuple[str, str] = ('y', 'x'), driver: str = 'GTiff') -> Union[xr.DataArray, xr.Dataset]

   Convert responses from ``pygeoogc.wms_bybox`` to ``xarray.Dataset``.

   :param r_dict: The output of ``wms_bybox`` function.
   :type r_dict: dict
   :param geometry: The geometry to mask the data that should be in the same CRS as the r_dict.
   :type geometry: Polygon, MultiPolygon, or tuple
   :param geo_crs: The spatial reference of the input geometry.
   :type geo_crs: str
   :param ds_dims: The names of the vertical and horizontal dimensions (in that order)
                   of the target dataset, default to ("y", "x").
   :type ds_dims: tuple of str, optional
   :param driver: A GDAL driver for reading the content, defaults to GTiff. A list of the drivers
                  can be found here: https://gdal.org/drivers/raster/index.html
   :type driver: str, optional

   :returns: The dataset or data array based on the number of variables.
   :rtype: xarray.Dataset or xarray.DataAraay


.. function:: gtiff2file(r_dict: Dict[str, bytes], geometry: Union[Polygon, MultiPolygon, Tuple[float, float, float, float]], geo_crs: str, output: Union[str, Path] = '.', driver: str = 'GTiff') -> None

   Save responses from ``pygeoogc.wms_bybox`` to raster file(s).

   :param r_dict: The output of ``wms_bybox`` function.
   :type r_dict: dict
   :param geometry: The geometry to mask the data that should be in the same CRS as the r_dict.
   :type geometry: Polygon, MultiPolygon, or tuple
   :param geo_crs: The spatial reference of the input geometry.
   :type geo_crs: str
   :param output: Path to a folder saving files. File names are keys of the input dictionary, so
                  each layer becomes one file. Defaults to current directory.
   :type output: str
   :param driver: A GDAL driver for reading the content, defaults to GTiff. A list of the drivers
                  can be found here: https://gdal.org/drivers/raster/index.html
   :type driver: str, optional


.. function:: xarray_geomask(ds: Union[xr.Dataset, xr.DataArray], geometry: Union[Polygon, MultiPolygon, Tuple[float, float, float, float]], geo_crs: str, ds_dims: Tuple[str, str] = ('y', 'x')) -> Union[xr.Dataset, xr.DataArray]

   Mask a ``xarray.Dataset`` based on a geometry.

   :param ds: The dataset(array) to be masked
   :type ds: xarray.Dataset or xarray.DataArray
   :param geometry: The geometry or bounding box to mask the data
   :type geometry: Polygon, MultiPolygon, or tuple of length 4
   :param geo_crs: The spatial reference of the input geometry
   :type geo_crs: str
   :param ds_dims: The names of the vertical and horizontal dimensions (in that order)
                   of the dataset, default to ("y", "x").
   :type ds_dims: tuple of str, optional

   :returns: The input dataset with a mask applied (np.nan)
   :rtype: xarray.Dataset or xarray.DataArray


.. function:: get_transform(ds: Union[xr.Dataset, xr.DataArray], ds_dims: Tuple[str, str] = ('y', 'x')) -> Tuple[affine.Affine, int, int]

   Get transform of a Polygon or bounding box.

   :param ds: The dataset(array) to be masked
   :type ds: xarray.Dataset or xarray.DataArray

   :returns: The affine transform, width, and height
   :rtype: affine.Affine, int, int


.. py:class:: MatchCRS

   Match CRS of an input geometry (Polygon, bbox, coord) with the output CRS.

   :param geometry: The input geometry (Polygon, bbox, coord)
   :type geometry: tuple or Polygon
   :param in_crs: The spatial reference of the input geometry
   :type in_crs: str
   :param out_crs: The target spatial reference
   :type out_crs: str

   .. method:: geometry(geom: Polygon, in_crs: str, out_crs: str) -> Polygon
      :staticmethod:

      Transform a Polygon.


   .. method:: bounds(geom: Tuple[float, float, float, float], in_crs: str, out_crs: str) -> Tuple[float, float, float, float]
      :staticmethod:

      Transform a bounding box ``(west, south, east, north)``.


   .. method:: coords(geom: Tuple[Tuple[float, ...], Tuple[float, ...]], in_crs: str, out_crs: str) -> Tuple[Any, ...]
      :staticmethod:

      Transform a set of coordinates in form of ((xs), (ys)).



.. function:: check_bbox(bbox: Tuple[float, float, float, float]) -> None

   Check if an input inbox is a tuple of length 4.


.. function:: geo2polygon(geometry: Union[Polygon, MultiPolygon, Tuple[float, float, float, float]], geo_crs: str, crs: str) -> Polygon

   Convert a geometry to a Shapely's Polygon and transform to any CRS.

   :param geometry: A Polygon or bounding box (west, south, east, north).
   :type geometry: Polygon or tuple of length 4
   :param geo_crs: THe spatial reference of the input geometry
   :type geo_crs: str
   :param crs: The target spatial reference.
   :type crs: str

   :returns: A Polygon in the target CRS.
   :rtype: Polygon


