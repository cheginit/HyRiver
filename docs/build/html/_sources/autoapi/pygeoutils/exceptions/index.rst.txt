:mod:`pygeoutils.exceptions`
============================

.. py:module:: pygeoutils.exceptions

.. autoapi-nested-parse::

   Customized PyGeoUtils exceptions.



Module Contents
---------------

.. py:exception:: InvalidInputType(arg: str, valid_type: str, example: Optional[str] = None)

   Bases: :class:`Exception`

   Exception raised when a function argument type is invalid.

   :param arg: Name of the function argument
   :type arg: str
   :param valid_type: The valid type of the argument
   :type valid_type: str
   :param example: An example of a valid form of the argument, defaults to None.
   :type example: str, optional

   .. py:class:: args


   .. method:: with_traceback()

      Exception.with_traceback(tb) --
      set self.__traceback__ to tb and return self.



.. py:exception:: InvalidInputValue(inp: str, valid_inputs: Union[List[str], Generator[str, None, None]])

   Bases: :class:`Exception`

   Exception raised for invalid input.

   :param inp: Name of the input parameter
   :type inp: str
   :param valid_inputs: List of valid inputs
   :type valid_inputs: tuple

   .. py:class:: args


   .. method:: with_traceback()

      Exception.with_traceback(tb) --
      set self.__traceback__ to tb and return self.



.. py:exception:: MissingAttribute(attr: str, avail_attrs: Union[List[str], Generator[str, None, None]])

   Bases: :class:`Exception`

   Exception raised for missing attribute.

   :param attr: Name of the input attribute
   :type attr: str
   :param avail_attrs: List of valid inputs
   :type avail_attrs: tuple

   .. py:class:: args


   .. method:: with_traceback()

      Exception.with_traceback(tb) --
      set self.__traceback__ to tb and return self.



