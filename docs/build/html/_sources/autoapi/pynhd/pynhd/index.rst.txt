:mod:`pynhd.pynhd`
==================

.. py:module:: pynhd.pynhd

.. autoapi-nested-parse::

   Access NLDI and WaterData databases.



Module Contents
---------------

.. data:: logger
   

   

.. data:: handler
   

   

.. data:: handlers
   

   

.. data:: propagate
   :annotation: = False

   

.. data:: DEF_CRS
   :annotation: = epsg:4326

   

.. data:: ALT_CRS
   :annotation: = epsg:4269

   

.. py:class:: WaterData(layer: str, crs: str = DEF_CRS)

   Access to `Water Data <https://labs.waterdata.usgs.gov/geoserver>`__ service.

   :param layer: A valid layer from the WaterData service. Valid layers are:
                 ``nhdarea``, ``nhdwaterbody``, ``catchmentsp``, ``nhdflowline_network``
                 ``gagesii``, ``huc08``, ``huc12``, ``huc12agg``, and ``huc12all``. Note that
                 the layers' worksapce for the Water Data service is ``wmadata`` which will
                 be added to the given ``layer`` argument if it is not provided.
   :type layer: str
   :param crs: The target spatial reference system, defaults to ``epsg:4326``.
   :type crs: str, optional

   .. method:: bybox(self, bbox: Tuple[float, float, float, float], box_crs: str = DEF_CRS) -> gpd.GeoDataFrame

      Get features within a bounding box.


   .. method:: bygeom(self, geometry: Union[Polygon, MultiPolygon], geo_crs: str = DEF_CRS, xy: bool = True, predicate: str = 'INTERSECTS') -> gpd.GeoDataFrame

      Get features within a geometry.

      :param geometry: The input geometry
      :type geometry: shapely.geometry
      :param geom_crs: The CRS of the input geometry, default to epsg:4326.
      :type geom_crs: str, optional
      :param xy: Whether axis order of the input geometry is xy or yx.
      :type xy: bool, optional
      :param predicate: The geometric prediacte to use for requesting the data, defaults to
                        INTERSECTS. Valid predicates are:
                        EQUALS, DISJOINT, INTERSECTS, TOUCHES, CROSSES, WITHIN, CONTAINS,
                        OVERLAPS, RELATE, BEYOND
      :type predicate: str, optional

      :returns: The requested features in the given geometry.
      :rtype: geopandas.GeoDataFrame


   .. method:: bydistance(self, coords: Tuple[float, float], distance: int, loc_crs: str = DEF_CRS) -> gpd.GeoDataFrame

      Get features within a radius (in meters) of a point.


   .. method:: byid(self, featurename: str, featureids: Union[List[str], str]) -> gpd.GeoDataFrame

      Get features based on IDs.


   .. method:: byfilter(self, cql_filter: str, method: str = 'GET') -> gpd.GeoDataFrame

      Get features based on a CQL filter.



.. py:class:: AGRBase(layer: str, outfields: Union[str, List[str]] = '*', crs: str = DEF_CRS, service: Optional[ArcGISRESTful] = None)

   Base class for accessing NHD(Plus) HR database through the National Map ArcGISRESTful.

   :param layer: A valid service layer. For a list of available layers pass an empty string to
                 the class.
   :type layer: str
   :param outfields: Target field name(s), default to "*" i.e., all the fields.
   :type outfields: str or list, optional
   :param crs: Target spatial reference, default to EPSG:4326
   :type crs: str, optional

   .. method:: connect_to(self, service: str, service_list: Dict[str, str], auto_switch: bool) -> None

      Connect to a web service.

      :param service: Name of the preferred web service to connect to from the list provided in service_list.
      :type service: str, optional
      :param service_list: A dict where keys are names of the web services and values are their URLs.
      :type service_list: dict
      :param auto_switch: Automatically switch to other services' URL if the first one doesn't work, default to False.
      :type auto_switch: bool, optional


   .. method:: bygeom(self, geom: Union[Polygon, List[Tuple[float, float]], Tuple[float, float, float, float]], geo_crs: str = DEF_CRS, sql_clause: str = '', distance: Optional[int] = None, return_m: bool = False) -> gpd.GeoDataFrame

      Get feature within a geometry that can be combined with a SQL where clause.

      :param geom: A geometry (Polygon) or bounding box (tuple of length 4).
      :type geom: Polygon or tuple
      :param geo_crs: The spatial reference of the input geometry.
      :type geo_crs: str
      :param sql_clause: A valid SQL 92 WHERE clause, defaults to an empty string.
      :type sql_clause: str, optional
      :param distance: The buffer distance for the input geometries in meters, default to None.
      :type distance: int, optional
      :param return_m: Whether to activate the Return M (measure) in the request, defaults to False.
      :type return_m: bool, optional

      :returns: The requested features as a GeoDataFrame.
      :rtype: geopandas.GeoDataFrame


   .. method:: byids(self, field: str, fids: Union[str, List[str]], return_m: bool = False) -> gpd.GeoDataFrame

      Get features based on a list of field IDs.

      :param field: Name of the target field that IDs belong to.
      :type field: str
      :param fids: A list of target field ID(s).
      :type fids: str or list
      :param return_m: Whether to activate the Return M (measure) in the request, defaults to False.
      :type return_m: bool

      :returns: The requested features as a GeoDataFrame.
      :rtype: geopandas.GeoDataFrame


   .. method:: bysql(self, sql_clause: str, return_m: bool = False) -> gpd.GeoDataFrame

      Get feature IDs using a valid SQL 92 WHERE clause.

      .. rubric:: Notes

      Not all web services support this type of query. For more details look
      `here <https://developers.arcgis.com/rest/services-reference/query-feature-service-.htm#ESRI_SECTION2_07DD2C5127674F6A814CE6C07D39AD46>`__

      :param sql_clause: A valid SQL 92 WHERE clause.
      :type sql_clause: str
      :param return_m: Whether to activate the Return M (measure) in the request, defaults to False.
      :type return_m: bool

      :returns: The requested features as a GeoDataFrame.
      :rtype: geopandas.GeoDataFrame



.. py:class:: NHDPlusHR(layer: str, outfields: Union[str, List[str]] = '*', crs: str = DEF_CRS, service: str = 'hydro', auto_switch: bool = False)

   Bases: :class:`pynhd.pynhd.AGRBase`

   Access NHDPlus HR database through the National Map ArcGISRESTful.

   :param layer: A valid service layer. For a list of available layers pass an empty string to
                 the class.
   :type layer: str
   :param outfields: Target field name(s), default to "*" i.e., all the fields.
   :type outfields: str or list, optional
   :param crs: Target spatial reference, default to EPSG:4326
   :type crs: str, optional
   :param service: Name of the web service to use, defaults to hydro. Supported web services are:
                   * hydro: https://hydro.nationalmap.gov/arcgis/rest/services/NHDPlus_HR/MapServer
                   * edits: https://edits.nationalmap.gov/arcgis/rest/services/NHDPlus_HR/NHDPlus_HR/MapServer
   :type service: str, optional
   :param auto_switch: Automatically switch to other services' URL if the first one doesn't work, default to False.
   :type auto_switch: bool, optional

   .. method:: connect_to(self, service: str, service_list: Dict[str, str], auto_switch: bool) -> None

      Connect to a web service.

      :param service: Name of the preferred web service to connect to from the list provided in service_list.
      :type service: str, optional
      :param service_list: A dict where keys are names of the web services and values are their URLs.
      :type service_list: dict
      :param auto_switch: Automatically switch to other services' URL if the first one doesn't work, default to False.
      :type auto_switch: bool, optional


   .. method:: bygeom(self, geom: Union[Polygon, List[Tuple[float, float]], Tuple[float, float, float, float]], geo_crs: str = DEF_CRS, sql_clause: str = '', distance: Optional[int] = None, return_m: bool = False) -> gpd.GeoDataFrame

      Get feature within a geometry that can be combined with a SQL where clause.

      :param geom: A geometry (Polygon) or bounding box (tuple of length 4).
      :type geom: Polygon or tuple
      :param geo_crs: The spatial reference of the input geometry.
      :type geo_crs: str
      :param sql_clause: A valid SQL 92 WHERE clause, defaults to an empty string.
      :type sql_clause: str, optional
      :param distance: The buffer distance for the input geometries in meters, default to None.
      :type distance: int, optional
      :param return_m: Whether to activate the Return M (measure) in the request, defaults to False.
      :type return_m: bool, optional

      :returns: The requested features as a GeoDataFrame.
      :rtype: geopandas.GeoDataFrame


   .. method:: byids(self, field: str, fids: Union[str, List[str]], return_m: bool = False) -> gpd.GeoDataFrame

      Get features based on a list of field IDs.

      :param field: Name of the target field that IDs belong to.
      :type field: str
      :param fids: A list of target field ID(s).
      :type fids: str or list
      :param return_m: Whether to activate the Return M (measure) in the request, defaults to False.
      :type return_m: bool

      :returns: The requested features as a GeoDataFrame.
      :rtype: geopandas.GeoDataFrame


   .. method:: bysql(self, sql_clause: str, return_m: bool = False) -> gpd.GeoDataFrame

      Get feature IDs using a valid SQL 92 WHERE clause.

      .. rubric:: Notes

      Not all web services support this type of query. For more details look
      `here <https://developers.arcgis.com/rest/services-reference/query-feature-service-.htm#ESRI_SECTION2_07DD2C5127674F6A814CE6C07D39AD46>`__

      :param sql_clause: A valid SQL 92 WHERE clause.
      :type sql_clause: str
      :param return_m: Whether to activate the Return M (measure) in the request, defaults to False.
      :type return_m: bool

      :returns: The requested features as a GeoDataFrame.
      :rtype: geopandas.GeoDataFrame



.. py:class:: NLDI

   Access the Hydro Network-Linked Data Index (NLDI) service.

   .. method:: getfeature_byid(self, fsource: str, fid: Union[str, List[str]]) -> Union[gpd.GeoDataFrame, Tuple[gpd.GeoDataFrame, List[str]]]

      Get feature(s) based ID(s).

      :param fsource: The name of feature(s) source. The valid sources are:
                      comid, huc12pp, nwissite, wade, wqp
      :type fsource: str
      :param fid: Feature ID(s).
      :type fid: str or list

      :returns: NLDI indexed features in EPSG:4326. If some IDs don't return any features
                a list of missing ID(s) are returnd as well.
      :rtype: geopandas.GeoDataFrame or (geopandas.GeoDataFrame, list)


   .. method:: comid_byloc(self, coords: Union[Tuple[float, float], List[Tuple[float, float]]], loc_crs: str = DEF_CRS) -> Union[gpd.GeoDataFrame, Tuple[gpd.GeoDataFrame, List[Tuple[float, float]]]]

      Get the closest ComID(s) based on coordinates.

      :param coords: A tuple of length two (x, y) or a list of them.
      :type coords: tuple or list
      :param loc_crs: The spatial reference of the input coordinate, defaults to EPSG:4326.
      :type loc_crs: str, optional

      :returns: NLDI indexed ComID(s) in EPSG:4326. If some coords don't return any ComID
                a list of missing coords are returnd as well.
      :rtype: geopandas.GeoDataFrame or (geopandas.GeoDataFrame, list)


   .. method:: get_basins(self, station_ids: Union[str, List[str]]) -> Union[gpd.GeoDataFrame, Tuple[gpd.GeoDataFrame, List[str]]]

      Get basins for a list of station IDs.

      :param station_ids: USGS station ID(s).
      :type station_ids: str or list

      :returns: NLDI indexed basins in EPSG:4326. If some IDs don't return any features
                a list of missing ID(s) are returnd as well.
      :rtype: geopandas.GeoDataFrame or (geopandas.GeoDataFrame, list)


   .. method:: getcharacteristic_byid(self, comids: Union[List[str], str], char_type: str, char_ids: Union[str, List[str]] = 'all', values_only: bool = True) -> Union[pd.DataFrame, Tuple[pd.DataFrame, pd.DataFrame]]

      Get characteristics using a list ComIDs.

      :param comids: The ID of the feature.
      :type comids: str or list
      :param char_type: Type of the characteristic. Valid values are ``local`` for
                        individual reach catchments, ``tot`` for network-accumulated values
                        using total cumulative drainage area and ``div`` for network-accumulated values
                        using divergence-routed.
      :type char_type: str
      :param char_ids: Name(s) of the target characteristics, default to all.
      :type char_ids: str or list, optional
      :param values_only: Whether to return only ``characteristic_value`` as a series, default to True.
                          If is set to False, ``percent_nodata`` is returned as well.
      :type values_only: bool, optional

      :returns: Either only ``characteristic_value`` as a dataframe or
                or if ``values_only`` is Fale return ``percent_nodata`` as well.
      :rtype: pandas.DataFrame or tuple of pandas.DataFrame


   .. method:: get_validchars(self, char_type: str) -> pd.DataFrame

      Get all the avialable characteristics IDs for a give characteristics type.


   .. method:: navigate_byid(self, fsource: str, fid: str, navigation: str, source: str, distance: int = 500) -> gpd.GeoDataFrame

      Navigate the NHDPlus databse from a single feature id up to a distance.

      :param fsource: The name of feature source. The valid sources are:
                      comid, huc12pp, nwissite, wade, WQP.
      :type fsource: str
      :param fid: The ID of the feature.
      :type fid: str
      :param navigation: The navigation method.
      :type navigation: str
      :param source: Return the data from another source after navigating
                     the features using fsource, defaults to None.
      :type source: str, optional
      :param distance: Limit the search for navigation up to a distance in km,
                       defaults is 500 km. Note that this is an expensive request so you
                       have be mindful of the value that you provide.
      :type distance: int, optional

      :returns: NLDI indexed features in EPSG:4326.
      :rtype: geopandas.GeoDataFrame


   .. method:: navigate_byloc(self, coords: Tuple[float, float], navigation: Optional[str] = None, source: Optional[str] = None, loc_crs: str = DEF_CRS, distance: int = 500) -> gpd.GeoDataFrame

      Navigate the NHDPlus databse from a coordinate.

      :param coords: A tuple of length two (x, y).
      :type coords: tuple
      :param navigation: The navigation method, defaults to None which throws an exception
                         if comid_only is False.
      :type navigation: str, optional
      :param source: Return the data from another source after navigating
                     the features using fsource, defaults to None which throws an exception
                     if comid_only is False.
      :type source: str, optional
      :param loc_crs: The spatial reference of the input coordinate, defaults to EPSG:4326.
      :type loc_crs: str, optional
      :param distance: Limit the search for navigation up to a distance in km,
                       defaults to 500 km. Note that this is an expensive request so you
                       have be mindful of the value that you provide. If you want to get
                       all the available features you can pass a large distance like 9999999.
      :type distance: int, optional

      :returns: NLDI indexed features in EPSG:4326.
      :rtype: geopandas.GeoDataFrame



.. py:class:: ScienceBase(save_dir: Optional[str] = None)

   Access NHDPlus V2.1 Attributes from ScienceBase over CONUS.

   More info can be found `here <https://www.sciencebase.gov/catalog/item/5669a79ee4b08895842a1d47>`_.

   :param save_dir: Directory to save the staged data frame containing metadata for the database,
                    defaults to system's temp directory. The metadata dataframe is saved as a feather
                    file, nhdplus_attrs.feather, in save_dir that can be loaded with Pandas.
   :type save_dir: str

   .. method:: get_children(self, item: str) -> Dict[str, Any]

      Get childern items of an item.


   .. method:: get_files(self, item: str) -> Dict[str, Tuple[str, str]]

      Get all the available zip files in an item.


   .. method:: stage_data(self) -> pd.DataFrame

      Stage the NHDPlus Attributes database and save to nhdplus_attrs.feather.



.. function:: nhdplus_attrs(name: Optional[str] = None, save_dir: Optional[str] = None) -> pd.DataFrame

   Access NHDPlus V2.1 Attributes from ScienceBase over CONUS.

   More info can be found `here <https://www.sciencebase.gov/catalog/item/5669a79ee4b08895842a1d47>`_.

   :param name: Name of the NHDPlus attribute, defaults to None which returns a dataframe containing
                metadata of all the available attributes in the database.
   :type name: str, optional
   :param save_dir: Directory to save the staged data frame containing metadata for the database,
                    defaults to system's temp directory. The metadata dataframe is saved as a feather
                    file, nhdplus_attrs.feather, in save_dir that can be loaded with Pandas.
   :type save_dir: str, optional

   :returns: Either a dataframe containing the database metadata or the requested attribute over CONUS.
   :rtype: pandas.DataFrame


