:mod:`pygeoogc.pygeoogc`
========================

.. py:module:: pygeoogc.pygeoogc

.. autoapi-nested-parse::

   Base classes and function for REST, WMS, and WMF services.



Module Contents
---------------

.. data:: DEF_CRS
   :annotation: = epsg:4326

   

.. py:class:: ArcGISRESTful

   Bases: :class:`pygeoogc.core.ArcGISRESTfulBase`

   Access to an ArcGIS REST service.

   :param base_url: The ArcGIS RESTful service url.
   :type base_url: str, optional
   :param outformat: One of the output formats offered by the selected layer. If not correct
                     a list of available formats is shown, defaults to ``geojson``.
   :type outformat: str, optional
   :param spatial_relation: The spatial relationship to be applied on the input geometry
                            while performing the query. If not correct a list of available options is shown.
                            It defaults to ``esriSpatialRelIntersects``.
   :type spatial_relation: str, optional
   :param outfields: The output fields to be requested. Setting ``*`` as outfields requests
                     all the available fields which is the default behaviour.
   :type outfields: str or list
   :param crs: The spatial reference of the output data, defaults to EPSG:4326
   :type crs: str, optional
   :param n_threads: Number of simultaneous download, default to 1 i.e., no threading. Note
                     that some services might face issues when several requests are sent
                     simultaniously and will return the requests partially. It's recommended
                     to avoid performing threading unless you are certain the web service can handle it.
   :type n_threads: int, optional

   .. method:: oids_bygeom(self, geom: Union[Polygon, Point, MultiPoint, Tuple[float, float], List[Tuple[float, float]], Tuple[float, float, float, float]], geo_crs: str = DEF_CRS, sql_clause: Optional[str] = None, distance: Optional[int] = None) -> None

      Get feature IDs within a geometry that can be combined with a SQL where clause.

      :param geom: A geometry (Polygon, Point, MultiPoint), tuple of length 2 (x, y),
                   a list of tuples of length 2 [(x, y), ...], or bounding box (tuple of length 4).
      :type geom: Polygon, Point, MultiPoint, tuple, or list of tuples
      :param geo_crs: The spatial reference of the input geometry, defaults to EPSG:4326.
      :type geo_crs: str
      :param sql_clause: A valid SQL 92 WHERE clause, default to None.
      :type sql_clause: str, optional
      :param distance: The buffer distance for the input geometries in meters, default to None.
      :type distance: int, optional


   .. method:: oids_byfield(self, field: str, ids: Union[str, List[str]]) -> None

      Get Object IDs based on a list of field IDs.

      :param field: Name of the target field that IDs belong to.
      :type field: str
      :param ids: A list of target ID(s).
      :type ids: str or list

      :returns: The requested features as a GeoDataFrame.
      :rtype: geopandas.GeoDataFrame


   .. method:: oids_bysql(self, sql_clause: str) -> None

      Get feature IDs using a valid SQL 92 WHERE clause.

      .. rubric:: Notes

      Not all web services support this type of query. For more details look
      `here <https://developers.arcgis.com/rest/services-reference/query-feature-service-.htm#ESRI_SECTION2_07DD2C5127674F6A814CE6C07D39AD46>`__

      :param sql_clause: A valid SQL 92 WHERE clause.
      :type sql_clause: str


   .. method:: get_features(self, return_m: bool = False) -> List[Dict[str, Any]]

      Get features based on the feature IDs.

      :param return_m: Whether to activate the Return M (measure) in the request, defaults to False.
      :type return_m: bool

      :returns: (Geo)json response from the web service.
      :rtype: dict



.. py:class:: WMS(url: str, layers: Union[str, List[str]], outformat: str, version: str = '1.3.0', crs: str = DEF_CRS, validation: bool = True)

   Bases: :class:`pygeoogc.core.WMSBase`

   Get data from a WMS service within a geometry or bounding box.

   :param url: The base url for the WMS service e.g., https://www.mrlc.gov/geoserver/mrlc_download/wms
   :type url: str
   :param layers: A layer or a list of layers from the service to be downloaded. You can pass an empty
                  string to get a list of available layers.
   :type layers: str or list
   :param outformat: The data format to request for data from the service. You can pass an empty
                     string to get a list of available output formats.
   :type outformat: str
   :param crs: The spatial reference system to be used for requesting the data, defaults to
               epsg:4326.
   :type crs: str, optional
   :param version: The WMS service version which should be either 1.1.1 or 1.3.0, defaults to 1.3.0.
   :type version: str, optional
   :param validation: Validate the input arguments from the WMS service, defaults to True. Set this
                      to False if you are sure all the WMS settings such as layer and crs are correct
                      to avoid sending extra requests.
   :type validation: bool, optional

   .. method:: getmap_bybox(self, bbox: Tuple[float, float, float, float], resolution: float, box_crs: str = DEF_CRS, always_xy: bool = False, max_px: int = 8000000) -> Dict[str, bytes]

      Get data from a WMS service within a geometry or bounding box.

      :param box: A bounding box for getting the data.
      :type box: tuple
      :param resolution: The output resolution in meters. The width and height of output are computed in pixel
                         based on the geometry bounds and the given resolution.
      :type resolution: float
      :param box_crs: The spatial reference system of the input bbox, defaults to
                      epsg:4326.
      :type box_crs: str, optional
      :param always_xy: Whether to always use xy axis order, defaults to False. Some services change the axis
                        order from xy to yx, following the latest WFS version specifications but some don't.
                        If the returned value does not have any geometry, it indicates that most probably the
                        axis order does not match. You can set this to True in that case.
      :type always_xy: bool, optional
      :param max_px: The maximum allowable number of pixels (width x height) for a WMS requests,
                     defaults to 8 million based on some trial-and-error.
      :type max_px: int, opitonal

      :returns: A dict where the keys are the layer name and values are the returned response
                from the WMS service as bytes. You can use ``utils.create_dataset`` function
                to convert the responses to ``xarray.Dataset``.
      :rtype: dict



.. py:class:: WFS(url: str, layer: Optional[str] = None, outformat: Optional[str] = None, version: str = '2.0.0', crs: str = DEF_CRS, validation: bool = True)

   Bases: :class:`pygeoogc.core.WFSBase`

   Data from any WFS service within a geometry or by featureid.

   :param url: The base url for the WFS service, for examples:
               https://hazards.fema.gov/nfhl/services/public/NFHL/MapServer/WFSServer
   :type url: str
   :param layer: The layer from the service to be downloaded, defaults to None which throws
                 an error and includes all the available layers offered by the service.
   :type layer: str
   :param outformat:
                     The data format to request for data from the service, defaults to None which
                      throws an error and includes all the available format offered by the service.
   :type outformat: str
   :param version: The WFS service version which should be either 1.1.1, 1.3.0, or 2.0.0.
                   Defaults to 2.0.0.
   :type version: str, optional
   :param crs: The spatial reference system to be used for requesting the data, defaults to
               epsg:4326.
   :type crs: str, optional
   :param validation: Validate the input arguments from the WFS service, defaults to True. Set this
                      to False if you are sure all the WFS settings such as layer and crs are correct
                      to avoid sending extra requests.
   :type validation: bool, optional

   .. method:: getfeature_bybox(self, bbox: Tuple[float, float, float, float], box_crs: str = DEF_CRS, always_xy: bool = False) -> Response

      Get data from a WFS service within a bounding box.

      :param bbox: A bounding box for getting the data: [west, south, east, north]
      :type bbox: tuple
      :param box_crs: The spatial reference system of the input bbox, defaults to
                      epsg:4326.
      :type box_crs: str, optional
      :param always_xy: Whether to always use xy axis order, defaults to False. Some services change the axis
                        order from xy to yx, following the latest WFS version specifications but some don't.
                        If the returned value does not have any geometry, it indicates that most probably the
                        axis order does not match. You can set this to True in that case.
      :type always_xy: bool, optional

      :returns: WFS query response within a bounding box.
      :rtype: requests.Response


   .. method:: getfeature_bygeom(self, geometry: Union[Polygon, MultiPolygon], geo_crs: str = DEF_CRS, always_xy: bool = False, predicate: str = 'INTERSECTS') -> Response

      Get features based on a geometry.

      :param geometry: The input geometry
      :type geometry: shapely.geometry
      :param geo_crs: The CRS of the input geometry, default to epsg:4326.
      :type geo_crs: str, optional
      :param always_xy: Whether to always use xy axis order, defaults to False. Some services change the axis
                        order from xy to yx, following the latest WFS version specifications but some don't.
                        If the returned value does not have any geometry, it indicates that most probably the
                        axis order does not match. You can set this to True in that case.
      :type always_xy: bool, optional
      :param predicate: The geometric prediacte to use for requesting the data, defaults to
                        INTERSECTS. Valid predicates are:
                        EQUALS, DISJOINT, INTERSECTS, TOUCHES, CROSSES, WITHIN, CONTAINS,
                        OVERLAPS, RELATE, BEYOND
      :type predicate: str, optional

      :returns: WFS query response based on the given geometry.
      :rtype: requests.Response


   .. method:: getfeature_byid(self, featurename: str, featureids: Union[List[str], str]) -> Response

      Get features based on feature IDs.

      :param featurename: The name of the column for searching for feature IDs
      :type featurename: str
      :param featureids: The feature ID(s)
      :type featureids: str or list

      :returns: WMS query response
      :rtype: requests.Response


   .. method:: getfeature_byfilter(self, cql_filter: str, method: str = 'GET') -> Response

      Get features based on a valid CQL filter.

      .. rubric:: Notes

      The validity of the input CQL expression is user's responsibility since
      the function does not perform any checks and just sends a request using
      the input filter.

      :param cql_filter: A valid CQL filter expression.
      :type cql_filter: str
      :param method: The request method, could be GET or POST (for long filters).
      :type method: str

      :returns: WFS query response
      :rtype: requests.Response



.. py:class:: ServiceURL

   Base URLs of the supported services.

   .. method:: restful(self) -> SimpleNamespace
      :property:

      Read RESTful URLs from the source yml file.


   .. method:: wms(self) -> SimpleNamespace
      :property:

      Read WMS URLs from the source yml file.


   .. method:: wfs(self) -> SimpleNamespace
      :property:

      Read WFS URLs from the source yml file.


   .. method:: http(self) -> SimpleNamespace
      :property:

      Read HTTP URLs from the source yml file.



