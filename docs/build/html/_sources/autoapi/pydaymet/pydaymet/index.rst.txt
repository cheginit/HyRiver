:mod:`pydaymet.pydaymet`
========================

.. py:module:: pydaymet.pydaymet

.. autoapi-nested-parse::

   Access the Daymet database for both single single pixel and gridded queries.



Module Contents
---------------

.. data:: DEF_CRS
   :annotation: = epsg:4326

   

.. data:: DATE_FMT
   :annotation: = %Y-%m-%d

   

.. data:: DATE_REQ
   :annotation: = %Y-%m-%dT%H:%M:%SZ

   

.. py:class:: Daymet(variables: Optional[Union[List[str], str]] = None, pet: bool = False, time_scale: str = 'daily')

   Base class for Daymet requests.

   :param variables: List of variables to be downloaded. The acceptable variables are:
                     ``tmin``, ``tmax``, ``prcp``, ``srad``, ``vp``, ``swe``, ``dayl``
                     Descriptions can be found `here <https://daymet.ornl.gov/overview>`__.
                     Defaults to None i.e., all the variables are downloaded.
   :type variables: str or list or tuple, optional
   :param pet: Whether to compute evapotranspiration based on
               `UN-FAO 56 paper <http://www.fao.org/docrep/X0490E/X0490E00.htm>`__.
               The default is False
   :type pet: bool, optional
   :param time_scale: Data time scale which can be daily, monthly (monthly summaries),
                      or annual (annual summaries). Defaults to daily.
   :type time_scale: str, optional

   .. method:: check_dates(dates: Union[Tuple[str, str], Union[int, List[int]]]) -> None
      :staticmethod:

      Check if input dates are in correct format and valid.


   .. method:: dates_todict(dates: Tuple[str, str]) -> Dict[str, str]
      :staticmethod:

      Set dates by start and end dates as a tuple, (start, end).


   .. method:: years_todict(years: Union[List[int], int]) -> Dict[str, str]
      :staticmethod:

      Set date by list of year(s).


   .. method:: dates_tolist(self, dates: Tuple[str, str]) -> List[Tuple[pd.DatetimeIndex, pd.DatetimeIndex]]

      Correct dates for Daymet accounting for leap years.

      Daymet doesn't account for leap years and removes Dec 31 when
      it's leap year. This function returns all the dates in the
      Daymet database within the provided date range.


   .. method:: years_tolist(self, years: Union[List[int], int]) -> List[Tuple[pd.DatetimeIndex, pd.DatetimeIndex]]

      Correct dates for Daymet accounting for leap years.

      Daymet doesn't account for leap years and removes Dec 31 when
      it's leap year. This function returns all the dates in the
      Daymet database for the provided years.


   .. method:: pet_byloc(clm_df: pd.DataFrame, coords: Tuple[float, float], crs: str = DEF_CRS, alt_unit: bool = False) -> pd.DataFrame
      :staticmethod:

      Compute Potential EvapoTranspiration using Daymet dataset for a single location.

      The method is based on `FAO-56 <http://www.fao.org/docrep/X0490E/X0490E00.htm>`__.
      The following variables are required:
      tmin (deg c), tmax (deg c), lat, lon, vp (Pa), srad (W/m2), dayl (s/day)
      The computed PET's unit is mm/day.

      :param clm_df: A dataframe with columns named as follows:
                     ``tmin (deg c)``, ``tmax (deg c)``, ``vp (Pa)``, ``srad (W/m^2)``, ``dayl (s)``
      :type clm_df: DataFrame
      :param coords: Coordinates of the daymet data location as a tuple, (x, y).
      :type coords: tuple of floats
      :param crs: The spatial reference of the input coordinate, defaults to epsg:4326
      :type crs: str, optional
      :param alt_unit: Whether to use alternative units rather than the official ones, defaults to False.
      :type alt_unit: str, optional

      :returns: The input DataFrame with an additional column named ``pet (mm/day)``
      :rtype: pandas.DataFrame


   .. method:: pet_bygrid(clm_ds: xr.Dataset) -> xr.Dataset
      :staticmethod:

      Compute Potential EvapoTranspiration using Daymet dataset.

      The method is based on `FAO 56 paper <http://www.fao.org/docrep/X0490E/X0490E00.htm>`__.
      The following variables are required:
      tmin (deg c), tmax (deg c), lat, lon, vp (Pa), srad (W/m2), dayl (s/day)
      The computed PET's unit is mm/day.

      :param clm_ds: The dataset should include the following variables:
                     ``tmin``, ``tmax``, ``lat``, ``lon``, ``vp``, ``srad``, ``dayl``
      :type clm_ds: xarray.DataArray

      :returns: The input dataset with an additional variable called ``pet``.
      :rtype: xarray.DataArray



.. function:: get_byloc(coords: Tuple[float, float], dates: Union[Tuple[str, str], Union[int, List[int]]], crs: str = DEF_CRS, variables: Optional[Union[List[str], str]] = None, pet: bool = False) -> pd.DataFrame

   Get daily climate data from Daymet for a single point.

   This function uses Daymet's RESTful service to get the daily
   climate data and does not support monthly and annual summaries.
   If you want to get the summaries directly use get_bycoords function.

   :param coords: Longitude and latitude of the location of interest as a tuple (lon, lat)
   :type coords: tuple
   :param dates: Either a tuple (start, end) or a list of years [YYYY, ...].
   :type dates: tuple or list
   :param crs: The spatial reference of the input coordinates, defaults to epsg:4326
   :type crs: str, optional
   :param variables: List of variables to be downloaded. The acceptable variables are:
                     ``tmin``, ``tmax``, ``prcp``, ``srad``, ``vp``, ``swe``, ``dayl``
                     Descriptions can be found `here <https://daymet.ornl.gov/overview>`__.
                     Defaults to None i.e., all the variables are downloaded.
   :type variables: str or list or tuple, optional
   :param pet: Whether to compute evapotranspiration based on
               `UN-FAO 56 paper <http://www.fao.org/docrep/X0490E/X0490E00.htm>`__.
               The default is False
   :type pet: bool, optional

   :returns: Daily climate data for a location
   :rtype: pandas.DataFrame


.. function:: get_bycoords(coords: Tuple[float, float], dates: Union[Tuple[str, str], Union[int, List[int]]], loc_crs: str = DEF_CRS, variables: Optional[List[str]] = None, pet: bool = False, region: str = 'na', time_scale: str = 'daily') -> xr.Dataset

   Get point-data from the Daymet database at 1-km resolution.

   This function uses THREDDS data service to get the coordinates
   and supports getting monthly and annual summaries of the climate
   data directly from the server.

   :param coords: Coordinates of the location of interest as a tuple (lon, lat)
   :type coords: tuple
   :param dates: Start and end dates as a tuple (start, end) or a list of years [2001, 2010, ...].
   :type dates: tuple or list, optional
   :param loc_crs: The CRS of the input geometry, defaults to epsg:4326.
   :type loc_crs: str, optional
   :param variables: List of variables to be downloaded. The acceptable variables are:
                     ``tmin``, ``tmax``, ``prcp``, ``srad``, ``vp``, ``swe``, ``dayl``
                     Descriptions can be found `here <https://daymet.ornl.gov/overview>`__.
   :type variables: str or list
   :param pet: Whether to compute evapotranspiration based on
               `UN-FAO 56 paper <http://www.fao.org/docrep/X0490E/X0490E00.htm>`__.
               The default is False
   :type pet: bool
   :param region: Region in the US, defaults to na. Acceptable values are:
                  * na: Continental North America
                  * hi: Hawaii
                  * pr: Puerto Rico
   :type region: str, optional
   :param time_scale: Data time scale which can be daily, monthly (monthly summaries),
                      or annual (annual summaries). Defaults to daily.
   :type time_scale: str, optional

   :returns: Daily climate data within a geometry
   :rtype: xarray.Dataset


.. function:: get_bygeom(geometry: Union[Polygon, MultiPolygon, Tuple[float, float, float, float]], dates: Union[Tuple[str, str], Union[int, List[int]]], geo_crs: str = DEF_CRS, variables: Optional[List[str]] = None, pet: bool = False, region: str = 'na', time_scale: str = 'daily') -> xr.Dataset

   Get gridded data from the Daymet database at 1-km resolution.

   :param geometry: The geometry of the region of interest.
   :type geometry: Polygon, MultiPolygon, or bbox
   :param dates: Start and end dates as a tuple (start, end) or a list of years [2001, 2010, ...].
   :type dates: tuple or list, optional
   :param geo_crs: The CRS of the input geometry, defaults to epsg:4326.
   :type geo_crs: str, optional
   :param variables: List of variables to be downloaded. The acceptable variables are:
                     ``tmin``, ``tmax``, ``prcp``, ``srad``, ``vp``, ``swe``, ``dayl``
                     Descriptions can be found `here <https://daymet.ornl.gov/overview>`__.
   :type variables: str or list
   :param pet: Whether to compute evapotranspiration based on
               `UN-FAO 56 paper <http://www.fao.org/docrep/X0490E/X0490E00.htm>`__.
               The default is False
   :type pet: bool
   :param region: Region in the US, defaults to na. Acceptable values are:
                  * na: Continental North America
                  * hi: Hawaii
                  * pr: Puerto Rico
   :type region: str, optional
   :param time_scale: Data time scale which can be daily, monthly (monthly average),
                      or annual (annual average). Defaults to daily.
   :type time_scale: str, optional

   :returns: Daily climate data within a geometry
   :rtype: xarray.Dataset


.. function:: get_filename(code: int, region: str) -> Dict[int, Callable[[str], str]]

   Generate an iterable URL list for downloading Daymet data.

   :param code: Endpoint code which should be one of the following:
                * 1840: Daily
                * 1855: Monthly average
                * 1852: Annual average
   :type code: int
   :param region: Region in the US. Acceptable values are:
                  * na: Continental North America
                  * hi: Hawaii
                  * pr: Puerto Rico
   :type region: str

   :returns: An iterator of generated URLs.
   :rtype: generator


.. function:: coord_urls(code: int, coord: Tuple[float, float], region: str, variables: List[str], dates: List[Tuple[pd.DatetimeIndex, pd.DatetimeIndex]]) -> Iterator[List[Tuple[str, Dict[str, str]]]]

   Generate an iterable URL list for downloading Daymet data.

   :param code: Endpoint code which should be one of the following:
                * 1840: Daily
                * 1855: Monthly average
                * 1852: Annual average
   :type code: int
   :param coord: Coordinates in EPSG:4326 CRS (lon, lat)
   :type coord: tuple of length 2
   :param region: Region in the US. Acceptable values are:
                  * na: Continental North America
                  * hi: Hawaii
                  * pr: Puerto Rico
   :type region: str
   :param variables: A list of Daymet variables
   :type variables: list
   :param date: A list of dates
   :type date: list

   :returns: An iterator of generated URLs.
   :rtype: generator


.. function:: gridded_urls(code: int, bounds: Tuple[float, float, float, float], region: str, variables: List[str], dates: List[Tuple[pd.DatetimeIndex, pd.DatetimeIndex]]) -> Iterator[Tuple[str, Dict[str, str]]]

   Generate an iterable URL list for downloading Daymet data.

   :param code: Endpoint code which should be one of the following:
                * 1840: Daily
                * 1855: Monthly average
                * 1852: Annual average
   :type code: int
   :param bounds: Bounding box (west, south, east, north)
   :type bounds: tuple of length 4
   :param region: Region in the US. Acceptable values are:
                  * na: Continental North America
                  * hi: Hawaii
                  * pr: Puerto Rico
   :type region: str
   :param variables: A list of Daymet variables
   :type variables: list
   :param date: A list of dates
   :type date: list

   :returns: An iterator of generated URLs.
   :rtype: generator


